diff --git a/Lib/compileall.py b/Lib/compileall.py
index 1c9ceb6930..5e919e3b29 100644
--- a/Lib/compileall.py
+++ b/Lib/compileall.py
@@ -16,10 +16,9 @@ import importlib.util
 import py_compile
 import struct
 
-try:
-    from concurrent.futures import ProcessPoolExecutor
-except ImportError:
-    ProcessPoolExecutor = None
+# Only import when needed, as low resource platforms may fail to import it
+ProcessPoolExecutor = None
+
 from functools import partial
 
 __all__ = ["compile_dir","compile_file","compile_path"]
@@ -68,13 +67,19 @@ def compile_dir(dir, maxlevels=10, ddir=None, force=False, rx=None,
     optimize:  optimization level or -1 for level of the interpreter
     workers:   maximum number of parallel workers
     """
-    if workers is not None and workers < 0:
-        raise ValueError('workers must be greater or equal to 0')
-
+    global ProcessPoolExecutor
+    if workers is not None:
+        if workers < 0:
+            raise ValueError('workers must be greater or equal to 0')
+        elif workers != 1 and ProcessPoolExecutor is None:
+            try:
+                from concurrent.futures import ProcessPoolExecutor
+            except ImportError:
+                ProcessPoolExecutor = False
     files = _walk_dir(dir, quiet=quiet, maxlevels=maxlevels,
                       ddir=ddir)
     success = True
-    if workers is not None and workers != 1 and ProcessPoolExecutor is not None:
+    if workers is not None and workers != 1 and ProcessPoolExecutor:
         workers = workers or None
         with ProcessPoolExecutor(max_workers=workers) as executor:
             results = executor.map(partial(compile_file,
diff --git a/Lib/test/test_compileall.py b/Lib/test/test_compileall.py
index 2356efcaec..337a6ad8fb 100644
--- a/Lib/test/test_compileall.py
+++ b/Lib/test/test_compileall.py
@@ -183,7 +183,7 @@ class CompileallTests(unittest.TestCase):
         self.assertFalse(pool_mock.called)
         self.assertTrue(compile_file_mock.called)
 
-    @mock.patch('compileall.ProcessPoolExecutor', new=None)
+    @mock.patch('compileall.ProcessPoolExecutor', new=False)
     @mock.patch('compileall.compile_file')
     def test_compile_missing_multiprocessing(self, compile_file_mock):
         compileall.compile_dir(self.directory, quiet=True, workers=5)
